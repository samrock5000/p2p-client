name: build and release binaries

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary_name: watch-demo-linux
            binary_path: target/release/examples/watch-demo
          - os: macos-latest
            binary_name: watch-demo-macos
            binary_path: target/release/examples/watch-demo
          - os: windows-latest
            binary_name: watch-demo-windows.exe
            binary_path: target/release/examples/watch-demo.exe

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: set up rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: build binary
        working-directory: examples
        run: cargo build --release --verbose

      - name: rename binary for platform
        if: matrix.os != 'windows-latest'
        shell: bash
        run: mv target/release/examples/watch-demo target/release/examples/${{ matrix.binary_name }}

      - name: create release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'ubuntu-latest' && startswith(github.ref, 'refs/tags/')
        env:
          github_token: ${{ secrets.github_token }}
        with:
          tag_name: ${{ github.ref_name }}
          name: release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: upload binary
        uses: softprops/action-gh-release@v1
        if: startswith(github.ref, 'refs/tags/')
        env:
          github_token: ${{ secrets.github_token }}
        with:
          files: target/release/examples/${{ matrix.binary_name }}
          tag_name: ${{ github.ref_name }}
